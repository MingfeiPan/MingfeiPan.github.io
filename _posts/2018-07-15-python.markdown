---
layout: post
title:  python协程的另一些笔记
category: python
tag : python
--- 

### yield from

yield from是python3.3的新语法, 来自[PEP-380](https://www.python.org/dev/peps/pep-0380/), 目的也很直接:  

`for a generator to delegate part of its operations to another generator`

如果有仔细看上一篇里Beazley的那个ppt, 里面说了很多把coroutines当作pipelines管道来利用的例子, 中间作为管道的coroutines也可以说是所谓委派生成器。 在生成器gen中使用yield from subgen()时, subgen()会获得控制权, 把产出的值传给gen的调用方, 也就是调用方可以直接控制subgen。  

一个简单例子:  

```
def gen():
	for c in 'ab':
		yield c
	for i in range(0,5):
		yield i

print(list(gen()))

def gen1():
	yield from 'ab'
	yield from range(0,5)

print(list(gen1()))

output:
['a', 'b', 0, 1, 2, 3, 4]
['a', 'b', 0, 1, 2, 3, 4]

```
用yield from简化之前需要for循环处理的子生成器调用, yield会打开双向通道, 把外层的调用于内层子生成器连接起来。 其实这个例子还不太典型, 这里如果不用yield from, 我们也就仅仅需要多写一个for循环来处理简单的子生成器。然而真实使用时, 我们要处理coroutine的各种方法, send(), throw(), exit()等等, 全部手动处理的话, 代码是这样的:  

```
_i = iter(EXPR)
try:
    _y = next(_i)
except StopIteration as _e:
    _r = _e.value
else:
    while 1:
        try:
            _s = yield _y
        except GeneratorExit as _e:
            try:
                _m = _i.close
            except AttributeError:
                pass
            else:
                _m()
            raise _e
        except BaseException as _e:
            _x = sys.exc_info()
            try:
                _m = _i.throw
            except AttributeError:
                raise _e
            else:
                try:
                    _y = _m(*_x)
                except StopIteration as _e:
                    _r = _e.value
                    break
        else:
            try:
                if _s is None:
                    _y = next(_i)
                else:
                    _y = _i.send(_s)
            except StopIteration as _e:
                _r = _e.value
                break
RESULT = _r

```

使用yield from的话:  

```
RESULT = yield from EXPR

```

yield from处理了所有需要考虑的情况, 我们只需要按要求使用就可以了, 这里再列个例子:  

```
# Example of flattening a nested sequence using subgenerators

from collections import Iterable

def flatten(items, ignore_types=(str, bytes)):
    for x in items:
        if isinstance(x, Iterable) and not isinstance(x, ignore_types):
            yield from flatten(x)
        else:
            yield x

items = [1, 2, [3, 4, [5, 6], 7], 8]

# Produces 1 2 3 4 5 6 7 8
for x in flatten(items):
    print(x, end=' ')

items = ['Dave', 'Paula', ['Thomas', 'Lewis']]
for x in flatten(items):
    print(x, end=' ')
    
output:
1 2 3 4 5 6 7 8 Dave Paula Thomas Lewis

```

《流畅的python》离给出了yield from 细节内容(p398), 我抄在这里作为记录:  
* 子生成器产出的值都直接传给委派生成器的调用方  
* 使用send()方法发给委派生成器的值都直接传给子生成器。如果发送的值是None, 那么会调用子生成器的 \_\_next__()方法。如果发送的值不是None, 那么会调用子生成器的send()方法。如果调用的方法抛出StopIteration异常, 那么委派生成器恢复运行。任何其他异常都会向上冒泡, 传给委派生成器  
* 生成器退出时, 生成器(或子生成器)中的return expr 表达式会触发 StopIteration(expr)异常抛出  
* yield from表达式的值是子生成器终止时传给StopIteration异常的第一个参数  
* 传入委派生成器的异常, 除了GeneratorExit之外都传给子生成器的throw()方法。如果调用throw()方法时抛出StopIteration异常, 委派生成器恢复运行。StopIteration之外的异常会向上冒泡。传给委派生成器  
* 如果把GeneratorExit异常传入委派生成器, 或者在委派生成器上调用close()方法, 那么在子生成器上调用close()方法, 如果他有的话。如果调用close()方法导致异常抛出, 那么异常会向上冒泡, 传给委派生成器, 否则, 委派生成器抛出GeneratorExit异常  

其实yield from就是完成了类似其他语言await的作用, 所以有一个问题:  
为什么不直接用await? 我猜当时应该是有过讨论的, 而且是蛮激烈的讨论, 最终可能是BDFL决定不使用新的关键字而是用yield from这种语法来代替。 这在很长一段时期内导致def关键字混用: 协程, 函数, 生成器都用def来定义, 对于初学者来说很容易困惑。   

甚至python3.4还提供了@asyncio.coroutine来装饰使用yeld from语法的协程, 便于从一个普通函数中把协程"凸显"出来, 但这样也并没有解决根本问题。  

手册上的说明:  
>@asyncio.coroutine: Decorator to mark generator-based coroutines. This enables the generator use yield from to call async def coroutines, and also enables the generator to be called by async def coroutines, for instance using an await expression.

更巧合的是python的协程包asyncio基本完成于python3.4, 这也导致lib代码里使用了大量的yield from, 一直留到现在, 但其实yield from在python3.5之后就被await关键字取代了, 记得阅读asyncio lib代码时还专门去看了python3.7仍旧有大量yield from使用。  

《流畅的python》这本书完成于2015年, 在那个时间前后, python3.5新加入了关键字asnyc/await来取代旧的yield from, 由[PEP-492](https://www.python.org/dev/peps/pep-0492/#async-await)提出, 书中作者在介绍yield from时多次提到了新语法的动向, 很明显能看出来他对yield from语法颇有微词, 原话是:"The introduction of yield from is particularly worrying"(p415)。其实如果书能晚写完个半年, 作者就能把async/await的内容加上去了, 书里对携程的介绍也能更加完满。不过不管怎么样今天的python已经可以完美使用async/await来实现协程了。

### async/await  

来自[PEP-492](https://www.python.org/dev/peps/pep-0492/#async-await)的内容, 简单说就是用async替换掉@asyncio.coroutine, 用await替换掉yield from  
原先这样实现的协程:  

```
@asyncio.coroutine
def do(x):
	yield from asyncio.sleep(x)
	print('waiting : {}'.format(x))
	return x 
```
现在这样写:  

```
async def do(x):
	await asyncio.sleep(x)
	print('waiting : {}'.format(x))
	return x
```

PEP-492给出官方的替换理由:  
* 因为使用相同的语法, coroutines跟一般的生成器太容易混淆了, 尤其是对新手 
* 特征非常不明显, 一个函数是否是一个协程, 只取决于它里面是否出现了yield或yield from语句, 重构容易出错    
* 语法上只有允许yield的地方才可以使用异步调用, 像with或者for这样的语法压根没得用了  

为了严格地把协程从之前跟生成器混用的情况中分离出来, 新添加了一些概念:  

* Native coroutine function 原生协程函数, 由async def定义的协程, 可以配合使用await或者return语句。 特别说明, 不管有没有await, 只要用async定义的就是协程  
* Native coroutine 原生协程, 调用原生协程函数返回的对象, python对象内部用CO\_COROUTINE标志, 原生协程对象不实现\_\_iter\_\_和\_\_next\_\_方法, 不能对其迭代  
* Generator-based coroutine function 基于生成器的协程函数, 基于生成器语法的协程, 用@asyncio.coroutine装饰器与yield from定义的协程  
* Generator-based coroutine 于生成器的协程, 基于生成器的协程函数返回的对象, python内部对象用CO\_ITERABLE\_COROUTINE标志    
* Asynchronous context manager, 异步上下文管理器, async with  
* Asynchronous iterator, 异步迭代器, async for     
* 未装饰(@types.coroutine)的生成器不能yield from一个原生协程, 这样做会引发TypeError异常
* 基于生成器的协程在经过@asyncio.coroutine装饰后, 可以yield from原生协程对象(python3.5 经过@asyncio.coroutine装饰的基于生成器的协程对象也可以被await调用) 

#### types.coroutine  

types模块添加了一个装饰器新函数coroutine(fn), 可以把基于生成器语法的协程转化为"原生协程"。其实就是给被装饰函数加一个CO_ITERABLE_COROUTINE标志, 使其可以被await调用  

#### 对async的一些语法要求  

>1 在async函数里面使用yield或yield from语句, 会引发SyntaxError异常  
>2 协程不再抛出StopIteration异常, 而是一个RuntimeError异常  
>3 如果一个协程从未await等待就被垃圾收集器销毁了, 会引发一个RuntimeWarning异常

#### 对await的一些语法要求  
>1 await和yield from类似  
>2 在cpython内部, await使用了yield from的实现, 但是多了一步参数验证, await只接受awaitable对象  
>3 在async def函数之外使用await语句, 会引发SyntaxError异常  
>4 await右边不是一个awaitable对象, 会引发TypeError异常  

关于awaitable对象:  
* 一个原生协程对象, 或者一个被@types.coroutine装饰过的生成器实现的协程对象都是awaitable对象  
* 一个有\_\_await\_\_方法的对象  
* CPython C API中带有tp_as_async.am_await的函数, 该函数返回一个迭代器  

关于\_\_await\_\_方法:   
* \_\_await\_\_返回一个迭代器, 每个yield from调用链条都会追溯到一个最终的yield语句, 这是Future实现的基本机制。在Python内部, 协程是生成器的一种特殊形式, 每个await最终会被await调用链上的某个yield语句挂起, 为了让协程可以这样使用, 添加了一个新的魔术方法\_\_await\_\_, 这里PEP给了个例子: 在asyncio模块, 要想在await语句里使用Future对象, 只需给asyncio.Future加一行: \_\_await\_\_ = \_\_iter\_\_

```
In asyncio, for instance, to enable Future objects in await statements, the only change is to add __await__ = __iter__ line to asyncio.Future class
``` 


asyncio之前是使用python3.4语法写的, 所以必然有一些兼容性的改动以配合async/await:  
* 修改@asyncio.coroutine装饰器, 调用types.coroutine()函数来设置一个CO\_ITERABLE\_COROUTINE标识  
* 在asyncio.Future类加一行, \_\_await\_\_ = \_\_iter\_\_(上面提到过的) 
* 用ensure_future()替换async()函数, async()函数被标记为Deprecated  

因为generator-based的协程跟native协程现在确实不同了, 所以之前写generator-based的协程时所要求的@asyncio.coroutine装饰器现在是强制的了, 只有被@asyncio.coroutine装饰过的generator-based的协程才可以正常使用  

还看到了一块想写在这里的:  
Why "async" and "await" keywords  
>1 	C#老早就用了  
>2 ECMAScript 7也要用了  
>3 Facebook's Hack/HHVM用了  
>4 Google's Dart language, Scala也用了  
>5 C++也要用了  
>6 还有其他小众语言也用了...   

This is a huge benefit, as some users already have experience with async/await, and because it makes working with many languages in one project easier (Python with ECMAScript 7 for instance)






 



