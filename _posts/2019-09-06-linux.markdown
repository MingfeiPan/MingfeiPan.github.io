---
layout: post
title: Your daily dose of linux(33)
category: linux
tag : linux
---
<img src="/img/in-post/linux.jpg">

### sort  

对文件内容进行排序, 利用 *sort -k* 把文件排序玩出花来 


### 参数列表 

```
-b: 忽略每行前面开始的空格字符, 空格数量不固定时, 该选项几乎是必须要使用的("-n"选项隐含该功能)  
-c: 检查文件是否已经按照顺序排序, 如未排序, 会提示从哪一行开始乱序
-C: 类似于"-c", 只不过不输出任何诊断信息, 可以通过退出状态码1判断出文件未排序
-d: 只处理英文字母, 数字及空格, 忽略其他的字符
-f: 将小写字母视为大写字母
-i: 除了040至176之间的ASCII字符外(八进制0-177), 忽略其他的字符(忽略无法打印的字符如退格/换页键/回车)
-k: 以哪个区间(field)来进行排序
-m: 将几个排序好的文件进行合并, 只是单纯合并, 不做排序
-M: 将前面3个字母依照月份的缩写进行排序
-n: 依照数值的大小排序
-o<输出文件>: 将排序后的结果存入指定的文件
-r: 降序
-u: 忽略相同行
-t<分隔字符>: 指定分隔符, 默认的分隔符为空白字符和非空白字符之间的空字符
```


### 示例 

我们直接关注 *sort -k* 的使用

将使用的数据集(中间用制表符分割 *'\t'* ):  

```
asd123	22
sdg22	24
zcxc12	21
gj24	74
sdg22	22
sdg22	12
sdg22	55
```

数据有两列, 通过制表符tab分隔, 通常我们要关注的参数有: 

* -t, 分隔符, 比如这个例子需要使用 *$'\t'* 
* -k, 指定区间, 根据哪一列来排序 
* -r, 升序还是降序  


> 根据第一列直接排序: 

```
sort -t $'\t' -k 1  sort.txt

asd123	22
gj24	74
sdg22	12
sdg22	22
sdg22	24
sdg22	55
zcxc12	21
``` 

> 根据第二列数值排序: 

```
sort -t $'\t' -k 2n  sort.txt

sdg22	12
zcxc12	21
asd123	22
sdg22	22
sdg22	24
sdg22	55
gj24	74
```

> 根据第二列数值排序, 相同时根据第一列反序: 

```
sort -t $'\t' -k 2n -k 1r sort.txt

sdg22	12
zcxc12	21
sdg22	22
asd123	22
sdg22	24
sdg22	55
gj24	74

```

> 根据第一列排序, 相同时根据第二列反序: 

```
sort -t $'\t' -k 1 -k 2nr sort.txt

asd123	22
gj24	74
sdg22	12
sdg22	22
sdg22	24
sdg22	55
zcxc12	21
```

这里出现了一个问题: 在第一列相等时, 数据并没有如期按照第二列的反序排序

原因是: 

`从前往后排序时, 需要指定确定区间, 否则后面的k不生效`


```
sort -t $'\t' -k 1 -k 2nr sort.txt

asd123	22
gj24	74
sdg22	55
sdg22	24
sdg22	22
sdg22	12
zcxc12	21
```

> 按照某个域中的第n个字符进行排序, 比如我们这里按第一列第二个字符进行排序

```
sort -t $'\t' -k 1.2,1.2 sort.txt

zcxc12	21
sdg22	12
sdg22	22
sdg22	24
sdg22	55
gj24	74
asd123	22
```

### 作用域

紧跟在 *-k* 后面的选项, 比如 *-k 2nr* 中的n, r为私有选项, 仅对此项k产生效果。 直接写在外面的 *-r*, *-n* 是全局选项

### -u 与 uniq

*-u* 会对指定的k列进行除重, uniq是针对整行去重的, 相当于在不使用 *-k* 的情况下使用-u

```
sort -t $'\t' -k 1,1 -u sort.txt

asd123	22
gj24	74
sdg22	24
zcxc12	21

sort -t $'\t' -k 1,1  sort.txt | uniq

asd123	22
gj24	74
sdg22	12
sdg22	22
sdg22	24
sdg22	55
zcxc12	21
```
















