---
layout: post
title:  python协程的一些笔记
category: python
tag : python
--- 
 
### 前言  

之前看过不少python相关的书籍, 有内容很好的也有内容很敷衍的, 不管是哪一类, 对python协程的介绍都很少, 有一些会提到yield生成器的相关内容, 但是对于python3之后协程的发展, 介绍非常少(就连David Beazley非常著名的那本python cookbook也是这样)。直到最近看到的了《fluent python》,这本书最独特的内容就是对python协程做了细致的分析, 从yield一直到分析到aiohttp, 跨越了python2.2到python3.4。由于这本书在15年出版, 因为时间关系无法对PEP492中提出的async/await语法做太多介绍, 但是也细致分析了yield以及yield from并在很地方都提到了在当时已经被提出了async/await syntax, 包括了通信的邮件, python社区大佬做的pyCon演讲, 可以说这本书非常用心了。这里结合书上的描述, 记录一些python协程发展相关的内容。  

python协程大致发展了数个阶段:  

>[PEP-255](https://www.python.org/dev/peps/pep-0255/), python2.2引入yield关键字来创建生成器    
>[PEP-342](https://www.python.org/dev/peps/pep-0342/), python2.5增强了yield generator的功能, 使之可以作为协程    
>[PEP-380](https://legacy.python.org/dev/peps/pep-0380/), python3.4引入@asyncio.coroutine与yield from      
>[PEP-492](https://www.python.org/dev/peps/pep-0492/), python3.5单独给出了协程关键字async/await, 相当于彻底区分了协程与生成器  

### yield  

先从yield说起。[PEP-255]((https://www.python.org/dev/peps/pep-0255/))建立的时间是18-May-2001(卧槽我那会应该才小学3年级), 可以说非常久远了。这里提出了新的关键字yield, 使用yield关键字的函数即为生成器函数, 详细的内容都在PEP里说的很详细了, 这里整篇内容都没有提到过coroutine的说法, 包括提出的动机中那里, 也只是跟线程做了比较, 我感觉这里提出的生成器(常常被描述为generator-iterators, 生成器-迭代器), 主要是在对列表类迭代器进行改进和提升, PEP中这样描述:  

`provide a kind of function that can return an intermediate result ("the next value") to its caller, but maintaining the function's local state so that the function can be resumed again right where it left off`  

相比之前的迭代器直接在内存中生成本次迭代的所有数据, 生成器每次只返回一个结果(the next value), 然后会维持当前的函数的相关上下文直到再次被调用(resumed)。因为不是一次得到整个迭代序列(也就是所谓的lazy evaluation惰性求值), 所以对内存的需求很低, 可以用来迭代较大的对象乃至无限长数列(python3中 range已经改用生成器实现)。如果我们把迭代器模型看成一个消费者/生产者模型, 那么这里的生产者只是在按次序给出下一个值。放到生成器这里, 我们可以更精细的控制生产者的产出。 

```
def fib():
    a, b = 0, 1
    while True:
       yield b
       a, b = b, a+b

f = fib()
for i in range(100):
	print(next(f))

```  

这里是一段利用生成器产生斐波那契数列的程序, fib是一个生成器函数, 调用fib不会执行其内部的代码, 而是会产生一个生成器对象f, f是一个可迭代对象, 对f调用next()方法, 生成器开始执行, 直到遇到下一个yield或者return语句时中断, 产出结果并交出控制权给调用函数。  

这也可以解释为什么这个阶段生成器的功能还比较简陋, 调用方式只有next(), 实现了__next__(), 就满足了可迭代对象的要求, return不能返回值而是抛出StopIteration异常, 只能产出值而不能接收值, 这些看起来很简陋的措施, 都已经符合了对迭代的要求。

### enhanced generators  

在定义了yield关键字大约4年之后, PEP-342为生成器添加了额外的方法, 也完善了很多功能, 最突出的那个应该就是.send()方法了, 这一个关键的改动使得生成器不光可以产出数据, 还可以接收数据, 使得生成器可以作为协程使用。

我在最初接触python yield的时候, 对区分生成器跟协程这两个概念很模糊, 大部分网络上的教程直接忽略了调用方的差别: next()方法与.send()方法一笔带过, 对yield从statement到expression的变化也没有提到, 一些甚至将两者混为一谈, 偏偏这两个概念又联系很多, 所以一直有点迷。直到看到两个PEP才搞明白, 其实区别很清楚。fluent python这本书里对这块给出了详细的解释, 还额外给出了David Beazley 在09年PyCon的一段总结([完整ppt仍然可以访问](http://www.dabeaz.com/coroutines/Coroutines.pdf)):    

<img src="/img/in-post/coroutineandgenerator.png">

* 生成器用于产生供迭代的数据  
* 协程是数据的消费者  
* 为了避免脑袋炸了, 不要把这两个概念理解混了  
* 协程与迭代无关  
* 在协程中会使用yield产出值, 但这与迭代无关  

至此coroutine跟generator应该是分的很清楚了, 我们接着看PEP-342的内容, 其中添加了三个方法:  
>.send(), 调用方可以使用.send(value)方法发送数据, value就是生成器中yield表达式的值, 而send的结果就是yield的值  
>.throw(), 调用者可以抛出异常, 给生成器处理  
>.close(), 调用者可以终止生成器   

`yield除了产出之外, 还有让步的意思, 生成器yield时, 会暂停执行, 把当前的控制权限让步给调用者, 这是协程实现控制的关键`  

```
import inspect

def gen(a):
	print('gen start a =', a)
	b = yield a
	print('received b =', b)
	c = yield a + b
	print('received c ={}'.format(c))


g = gen(14)
print(next(g))
# print(g.send(None))
print(inspect.getgeneratorstate(g))
print(g.send(28))
print(g.send(100))


output:  

GEN_CREATED
gen start a = 14
14
GEN_SUSPENDED
received b = 28
42
received c =100
Traceback (most recent call last):
  File "coro.py", line 17, in <module>
    print(g.send(100))
StopIteration

```
这是一段协程代码, 可以看到协程对象初始时, 其状态为GEN_CREATE, 执行了第一次next(g)到第一个yield, 协程挂起, 状态变为GEN_SUSPENDED。这里可以看到一次next()调用执行到了第一个yield的右半部分, 协程每一个阶段都是从yield这里分开的, 书里有个图表示的很好:  

<img src="/img/in-post/yield_coro.png">

我们这段程序执行3个阶段, 都在yield的断开, 上一个阶段执行右半边, 下一个阶段由客户端通过send()激活后, 再执行左半边的赋值语句直到下一个yield,最后我们赋值给c100这个值, 协程正常执行到末尾抛出StopIteration  

值得注意的是, 每一个处于初始状态的协程, 第一次执行时都会执行到第一个yield的右边, 此时是不会执行赋值语句的, 所以第一次需要调用next()或者send(None)来 *预激* 协程。如果通过send()传入任何非None值, 会报错TypeError。很多程序会用一个通用的装饰器预激协程, PEP-342最后的例子就给出了一个:  

```
#A simple consumer decorator that makes a generator function automatically advance to its first yield point when initially called

def consumer(func):
    def wrapper(*args,**kw):
        gen = func(*args, **kw)
        gen.next()
        return gen
    return wrapper
    
```

接着看一下剩余的改动:  
>.throw()方法致使协程暂停所在的yield处抛出指定的异常, yield产出的值会是.throw()方法的返回值, 如果协程没有处理抛出的异常, 这个异常也会继续向上抛出到调用方。  
>.close()方法会在暂停的yield处抛出GeneratorExit异常, 如果协程没有处理这个异常或者抛出了StopIteration异常, 调用方不会报错, 协程终止  

另外python3.3之前, 协程return时会报错, 之后的版本会抛出一个StopIteration, 在异常的value属性里保留此次return的值, 也算是提供一个return的途径。 其上就是PEP-342提出的内容, 更详细的部分可以直接看PEP, 其中在末尾给出的几个例子都不错。  

  





