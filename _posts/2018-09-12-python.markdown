---
layout: post
title:  python单例的一些笔记
category: python
tag : python
--- 

看到一篇讨论相关话题的贴子, 收获还挺大的, 这里记录一下。  

一个使用 \_\_new\_\_ 方法创建双检查带锁的单例, 先贴代码: 

```
# -*- encoding: utf-8 -*-

import threading

class Singletion(object):
	def __new__(cls, name):
		_instance_lock = threading.Lock()
		if not hasattr(cls, 'instance'):
			with _instance_lock:
				if not hasattr(cls, 'instance'):
					cls.instance = super(Singletion, cls).__new__(cls)
		return cls.instance

a = Singletion('a')
b = Singletion('b')

print(a == b)

output:
True

```
这一段代码沿用了java双检查锁单例模式的写法。本身代码是可用的, 但是引出了后续的问题:  

* 如果 Singleton 的子类重写了 \_\_new\_\_() 方法, 会覆盖或干扰 Singleton 类中 \_\_new\_\_() 的执行  
* 如果子类有 \_\_init\_\_() 方法, 那么每次实例化该 Singleton 的时候, \_\_init\_\_() 都会被调用到, 这显然是不应该的, \_\_init\_\_() 只应该在创建实例的时候被调用一次

这里顺便可以回顾一下 \_\_new\_\_() 方法的一些知识点: 

* \_\_new\_\_() 方法至少要有一个参数, 代表要实例化的类  
* \_\_new\_\_() 方法必须要有返回值, 返回实例化出来的实例, 这个返回可以是父类new出的实例, 也可以是object实例化出来的实例  
* 这个返回的实例即为 \_\_init\_\_() 方法的self参数, 如果\_\_new\_\_() 方法没有return, 那么类会是一个NoneType 
* 如果\_\_new\_\_() 方法没有返回当前类的实例, \_\_init\_\_() 方法不会被调用, 比如return一个父类的实例就是不可以的  

```
# -*- encoding: utf-8 -*-

class A(object):
    pass
 
class B(A):

    def __init__(self):
        print("init")

    def __new__(cls,*args, **kwargs):
        print("new", cls)
        return super(B, cls).__new__(cls, *args, **kwargs)
 
b=B()
print(b)

output:
new <class '__main__.B'>
init
<__main__.B object at 0x10ce1ba20>

```
结果\_\_init\_\_() 方法执行

```
# -*- encoding: utf-8 -*-

class A(object):
    pass
 
class B(A):

    def __init__(self):
        print("init")

    def __new__(cls,*args, **kwargs):
        print("new", cls)
        return super(B, cls).__new__(A, *args, **kwargs)
 
b=B()
print(b)

output:
new <class '__main__.B'>
<__main__.A object at 0x10411ea20>

```
不执行\_\_init\_\_() 方法

看回上面的问题, 第一种情况, 假设子类重写了 \_\_new\_\_() 方法, 并且忘记调用Singleton的 \_\_new\_\_() 方法, 那么单例就算是失效了。 第二种情况子类的init方法完全不受影响, 也无法达成单例的要求。

可以看到牵扯到子类时, 我们的单例总会出一些问题, 这种问题也会出现在使用装饰器的单例中, 所以对于单例的情况, 应该要避免使用继承。 贴子里也有人提到 Singleton 可以被继承就已经违反的单例模式。 

`其实仔细观察, 贴子里这种单例的写法, Singleton自己在使用时就会多次调用__init__() 方法` 

```
# -*- encoding: utf-8 -*-

import threading

class Singletion(object):

	def __init__(self, name):
		print('init', name)

	def __new__(cls, name):
		_instance_lock = threading.Lock()
		if not hasattr(cls, 'instance'):
			with _instance_lock:
				if not hasattr(cls, 'instance'):
					cls.instance = super(Singletion, cls).__new__(cls)
		return cls.instance

a = Singletion('a')
b = Singletion('b')

print(a == b)

outout:
init a
init b
True

```
虽说单例, 但是init每次都被调用了, 不太理想, 可以再改进为:

```
# -*- encoding: utf-8 -*-

import threading

class Singletion(object):

	def __init__(self):
		print('init')

	@classmethod
	def instance(cls):
		_instance_lock = threading.Lock()
		if not hasattr(cls, '_instance'):
			with _instance_lock:
				if not hasattr(cls, '_instance'):
					cls._instance = Singletion()
		return cls._instance

a = Singletion.instance()
b = Singletion.instance()

print(a == b)

output:
init
True

```
init只被调用了一次

另外除了用 \_\_new\_\_() 方法之外, 利用装饰器利用元类都可以实现单例, python的模块机制, 天然就是单例, 模块导入时, 会生成.pyc文件, 后续加载会加载.pyc文件而不是再次执行模块代码。 综合来看这是最完美的单例使用方法

```
singleton.py

class Singleton(object):
    def foo(self):
        pass
singleton = Singleton()

main.py

import singleton as obj

a = obj.singleton
b = obj.singleton

print(a)
print(b)
print(a == b)

output:
<singletonwithimport.Singleton object at 0x10cf05e10>
<singletonwithimport.Singleton object at 0x10cf05e10>
True

```

