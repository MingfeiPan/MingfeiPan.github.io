---
layout: post
title: python thread 的一些细节
category: python
tag : python
--- 


继续学习python, 接触到了python的多线程, 之前对线程的学习都是在linux下完成的, 通过c语言的pthread, 就我所学到的语言中线程的实现貌似都是通过posix下的pthread, php通过pthread扩展, python也是通过pthread.h(起码cpython是的), 其实这也是很显然的php跟cpython都是c写的(...老实说也没有再深究过其他语言)  

通常聊起python的多线程, 一般会使用[_thread](https://github.com/python/cpython/blob/3.6/Lib/_dummy_thread.py/)(或者叫做thread或者叫做_dummy_thread)或者[threading](https://github.com/python/cpython/blob/3.6/Lib/threading.py/)这两个模块, 官方文档用这样一句话形容这两个模块的区别    

>This module(threading) constructs higher-level threading interfaces on top of the lower level _thread module  

我想这表达的非常明确了, 具体地, _thread中调用一般start_new_thread()方法, threading中会有run(), start(), join()等等这些线程模型中用到的方法, 回头想想, 这里可能是我最先产生疑问的地方  

linux posix pthread的描述中, 线程在被create之后, 调用线程通过join阻塞一直阻塞, 直到join中的线程退出, 调用线程通过join可以回收资源, 并且可以通过thread_return拿到线程的返回值    

```
int pthread_join(pthread_t th, void **thread_return) 
```

其实我想说的是thread的joinable跟detach, 这里有一段话介绍这两种属性  

>linux线程, pthread有两种状态joinable和detach, 如果线程是joinable状态, 当线程函数自己返回退出时或pthread_exit时都不会释放线程所占用堆栈和线程描述符（总计8K多）, 只有当调用了pthread_join之后这些资源才会被释放, 若是detach状态的线程, 这些资源在线程函数退出时或pthread_exit时自动会被释放。
detach属性可以在pthread_create时指定, 或在线程创建后在线程中pthread_detach自己, pthread_detach(pthread_self()), 将状态改为detach状态, 确保资源的释放, join时因为有返回值可以接受, 往往可以做一些其他工作, 而detach表明已经不关心这个返回了  
  

我查了一些资料, 不管是apue亦或是一些文章, 都隐约指向了一个thread必然会具有这两种属性中的一个, 也就是说一个线程在结束的时候必须要被join或者自己设置detach来释放资源, 这里有一小段来自pthread detach man page[佐证](http://man7.org/linux/man-pages/man3/pthread_detach.3.html), 我推断这是一个二者必选其一的属性      


>Either pthread\_join(3) or pthread\_detach() should be called for each thread that an application creates, so that system resources for the thread can be released.  (But note that the resources of any threads for which one of these actions has not been done will be freed when the process terminates.)

`这里顺便多嘴一句, 除了 pthread_detach(pthread_self()) 来达成设置detach的目的之外, 我们也可以通用地用设置attr的方式在创建线程时设置PTHREAD_CREATE_DETACHED来实现`


那么怪异的地方就是python threading里提供了join方法作为结束时回收资源的处理, 但是_thread模块居然一点都没有提供类似的方法, 因为这两个模块都同时调用了_start_new_thread(), 我希望从这个方法里找到些什么, 我也确实找到了  

位置在[/Python/thread_pthread.h](https://github.com/python/cpython/blob/3.6/Python/thread_pthread.h), 从set thread attr到create的调用我们都很熟悉, 直到看到了pthread_detach(th), 原来_start_new_thread()的方法, 早就设置了detach

```
PyThread_start_new_thread(void (*func)(void *), void *arg)
{
    pthread_t th;
    int status;
#if defined(THREAD_STACK_SIZE) || defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
    pthread_attr_t attrs;
#endif
#if defined(THREAD_STACK_SIZE)
    size_t      tss;
#endif
...
...
    status = pthread_create(&th,
#if defined(THREAD_STACK_SIZE) || defined(PTHREAD_SYSTEM_SCHED_SUPPORTED)
                             &attrs,
#else
                             (pthread_attr_t*)NULL,
#endif
...
...
    if (status != 0)
        return -1;

    pthread_detach(th);
...
...
```

这解释了之前的疑问, 但是又出现了一个疑问, threading模块里那些被创建的detach属性的线程, 分明已经是unjoinable的了, 然后我们又调用了join?, 问题也被曾经[问到过](https://stackoverflow.com/questions/14175016/python-pthread-detach-analog), 这个问题可以通过看看threading模块下的[join源码](https://github.com/python/cpython/blob/3.6/Lib/threading.py)解决, 与create的不同的是, python threading的join并不调用pthread_join, 推测就是因为在create的时候做了detach而无法再使用joinable的属性, 选择了这样的处理(意味着某些代码里的join其实可以去掉了)。  

哦, 另外还有一点tips, 还记得pthread_join有一个thread_return可以线程的返回值对吗, 那么threading这个'假'join必然是做不动了, 但是如果一定要的话, 可以通过代码实现: 写一个多线程类继承于Thread, 或者通过一个全局的queue  

```
#自定义类实现
from threading import Thread


class ThreadWithReturn(Thread):
    def __init__(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None):
        Thread.__init__(self, group, target, name, args, kwargs, daemon=daemon)

        self._return = None

    def run(self):
        if self._target is not None:
            self._return = self._target(*self._args, **self._kwargs)

    def join(self):
        Thread.join(self)
        return self._return
     
    def my_result(self):
    	 return self._return

#重写run与join方法, 使之有一个我们需要的返回值
thread1 = ThreadWithReturn(somefunc)
thread1.start()
return_value = thread1.join()

#也可以单独写一个方法, 取出返回值
return_value = thread1.my_result()

```
