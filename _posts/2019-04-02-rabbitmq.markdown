---
layout: post
title:  rabbitmq 拾遗
category: rabbitmq
tag : rabbitmq
--- 

### pika consume callback user-defined parameters  

pika consumer端的callback方法默认给了4个参数, 如果用户想加自定义参数, 直接写入callback方法是不可以的。 python中有两种曲线救国的方法: lambda或者functools.partial   

lambda:   


```
channel.basic_consume(lambda ch, method, properties, body :  callback_with_arguments(ch, method, properties, body, fp=fp), queue=queue_name)

```


functools.partial:   


```
callback = functools.partial(callback_with_arguments, fp=fp)
channel.basic_consume(callback, queue=queue_name, no_ack=True)

```


再定义callback_with_arguments:  

```
def callback_with_arguments(ch, method, properties, body, fp=None):
	fp.write('{} {}-receive done!\r\n'.format(method.routing_key, body))
```

### multi messages 

原则上一次只能消费一条msg, 可以在业务逻辑上合成多条一次。  

### multiprocess/multithread 

You should ideally only have one connection per process, and then use a channel per thread in your application(Don’t share channels between threads)

### Pika is not thread safe  

* try rabbitpy(thread safe)  
* use the connections adapters


### Message properties  

The AMQP 0-9-1 protocol predefines a set of 14 properties that go with a message. Most of the properties are rarely used except:  

* delivery_mode: Marks a message as persistent (with a value of 2) or transient (any other value). 
* content_type: Used to describe the mime-type of the encoding. For example for the often used JSON encoding it is a good practice to set this property to: application/json  
* reply_to : Commonly used to name a callback queue  
* Useful to correlate RPC responses with requests  


### Consumer Acknowledgements and Publisher Confirms  

* Both features build on the same idea and are inspired by TCP

#### Delivery Tags  

*  When a consumer (subscription) is registered, messages will be delivered (pushed) by RabbitMQ using the basic.deliver method. The method carries a delivery tag, which uniquely identifies the delivery on a channel. Delivery tags are therefore scoped per channel.  
*  Delivery tags are monotonically growing positive integers and are presented as such by client libraries.  
*  Because delivery tags are scoped per channel, deliveries must be acknowledged on the same channel they were received on. Acknowledging on a different channel will result in an "unknown delivery tag" protocol exception and close the channel.  

In automatic acknowledgement mode, a message is considered to be successfully delivered immediately after it is sent, automatic message acknowledgement should be considered unsafe and not suitable for all workloads.  

#### Manually ack 

* basic.ack is used for positive acknowledgements 
* basic.nack is used for negative acknowledgements 
* basic.reject is used for negative acknowledgements but has one limitation compared to basic.nack  

#### Channel Prefetch Setting (QoS)  

a sliding window of delivery tags that are unacknowledged. This is done by setting a "prefetch count" value using the basic.qos method. The value defines the max number of unacknowledged deliveries that are permitted on a channel.

Automatic acknowledgement mode or manual acknowledgement mode with unlimited prefetch should be used with care. Consumers that consume a lot of messages without acknowledging will lead to memory consumption growth on the node they are connected to. 

Finding a suitable prefetch value is a matter of trial and error and will vary from workload to workload. Values in the 100 through 300 range usually offer optimal throughput and do not run significant risk of overwhelming consumers. 

#### When Consumers Fail or Lose Connection: Automatic Requeueing 

When manual acknowledgements are used, any delivery (message) that was not acked is automatically requeued when the channel (or connection) on which the delivery happened is closed. This includes TCP connection loss by clients, consumer application (process) failures, and channel-level protocol exceptions. 

Redeliveries will have a special boolean property, "redeliver" set to true by RabbitMQ. For first time deliveries it will be set to false.   

### Publisher Confirms

standard AMQP 0-9-1:  
using transactions -- make the channel transactional then for each message or set of messages publish, commit. In this case, transactions are unnecessarily heavyweight and decrease throughput by a factor of 250.   

alternative:  
a confirmation mechanism, To enable confirms, a client sends the confirm.select method. Depending on whether no-wait was set or not, the broker may respond with a confirm.select-ok. Once the confirm.select method is used on a channel, it is said to be in confirm mode. A transactional channel cannot be put into confirm mode and once a channel is in confirm mode, it cannot be made transactional.  


### Production Checklist  

#### Virtual Hosts  

* In a single-tenant environment, when your RabbitMQ cluster is dedicated to power a single system in production, using default virtual host (/) is perfectly fine.  
* In multi-tenant environments, use a separate vhost for each tenant/environment.  

#### Users  

* For production environments, delete the default user  
* It is recommended to use a separate user per application.   

#### Memory  

* By default, RabbitMQ will not accept any new messages when it detects that it's using more than 40% of the available memory (as reported by the OS): {vm_memory_high_watermark, 0.4}.   
* Nodes hosting RabbitMQ should have at least 128MB of memory available at all times.  
* The recommended vm_memory_high_watermark range is 0.40 to 0.66  
* Values above 0.7 are not recommended. The OS and file system must be left with at least 30% of the memory, otherwise performance may degrade severely due to paging.  

#### Disk Space  

* bound with memory limit, 4gb memory goes with at least 4gb disk space.  
* {disk_free_limit, {mem_relative, 1.0}} is the minimum recommended value.  
* {disk_free_limit, {mem_relative, 1.5}} is a safer production value.
* {disk_free_limit, {mem_relative, 2.0}} is the most conservative production value.  


#### Open File Handles Limit  

* Operating systems limit maximum number of concurrently open file handles, which includes network sockets.  
* Make sure your environment allows for at least 50K open file descriptors for effective RabbitMQ user, including in development environments.  

#### Connection  

* Messaging protocols generally assume long-lived connections. Some applications may open a new connection to perform a single operation (e.g. publish a message) and then close it. This is highly inefficient as opening a connection is an expensive operation (compared to reusing an existing one). 
*  Java, .NET and Ruby, support automatic connection recovery after network failures. Other clients (Go, Pika) do not support automatic connection recovery.  


#### Per-Queue Message TTL in Queues  

A message that has been in the queue for longer than the configured TTL is said to be dead.  
