---
layout: post
title: tcpdump
category: linux
tag : linux
---

<img src="/img/in-post/linux.jpg">


### tcpdump

tcpdump是linux下的一个抓包工具, 非常强力, 下面先从一个例子来看这个工具如何使用  

`tcpdump -i eth0 port 54544 -XX -e -c 1`  

<img src="/img/in-post/tcpdump1.png">

截取了来自udp的一条消息, this is a test, 我们逐句分析一下这些返回  

>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode  

使用-v,-vv可以看到全量的协议内容, 也就是详细内容  
>listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes  

表明我们是从eth0这个网卡上抓包的, 链路层基于以太网, 而抓包的大小限制为65535 字节  

>16:33:55.017159 00:0c:29:c6:8c:78 > ff:ff:ff:ff:ff:ff, ethertype IPv4 (0x0800), length 56: 192.168.1.232.52129 > 255.255.255.255.54544: UDP, length 14  

最开始为时间16:33:55.017159, 分别为时, 分, 秒, 微秒, 后面这一段是mac地址, 有00:0c:29:c6:8c:78 去到 > ff:ff:ff:ff:ff:ff, 因为我们截取的是一段udp群发的消息, 所以target mac指向ff:ff:ff:ff:ff:ff, 在后面表示网络层协议为IPv4, 接着是ip以及端口的来源192.168.1.232.52129 去向255.255.255.255.54544, 最后是传输层协议udp, length 56表示总长度, 14表示以太网header的长度  


```
	0x0000:  ffff ffff ffff 000c 29c6 8c78 0800 4500  ........)..x..E.
	0x0010:  002a 0000 4000 4011 7833 c0a8 01e8 ffff  .*..@.@.x3......
	0x0020:  ffff cba1 d510 0016 c2b7 5468 6973 2069  ..........This.i
	0x0030:  7320 6120 7465 7374                      s.a.test
```

最下面一段就是包内的内容, 我们也一层一层来看这个数据包, 首先是以太网协议的头部, 先贴一张ethernet头部的结构图 

<img src="/img/in-post/ip.png">

所以很自然的 我们可以看到 前14个字节  

>ffff ffff ffff  

目标mac地址

>000c 29c6 8c78    

源mac地址  

>0800  

上一层协议类型, 在这里也就是ip协议 0800(ethertype IPv4 (0x0800)在前一段也曾出现)  

`ps由此我们也可以看到以太网的头部为14字节, 加上尾部的fsc帧校验字段4个字节, 共18个字节 而以太网最小64字节, 最大1518字节,  1518-18为1500字节也就是以太网内包的最大值(mtu)`  

下面是ip数据包的部分, 还是先贴一张结构图  

<img src="/img/in-post/ip.png">  

ip协议头部默认是20字节的长度, 其中包括: 版本号-4bit, 头部长度-4bit, 服务类型-8bit, 总长度-16bit(16bit最大可以表示的数为65535, 也就是ip包的最大长度, 这远远大于1500的以太网数据包上限, 所以分片的情况得以出现), 标识-16bit, 标志-3bit, 片偏移-13bit, ttl-8bit, 协议-8bit, 首部校验和-16bit, 源ip-32bit, 目标ip-32bit  

这么一大长串, 就不一个一个挑出来分析了, 可以选择几个拿来看看, 在头14个字节后面跟着的 45 这8个bit 
>45  

分别表示了版本号与头部长度, 4表示协议为IPv4, 而5表示header长度(此处因为只有4个bit, 表示的最大数也只有15, 所以统一规定真实长度为该数乘4, 也就是20, 而这里也能看到ip header的最大长度为15*4=60)  

我们可以继续向后找到c0a8 01e8 ffff ffff 这8个字节, 很明显地, 他们是源ip跟目标ip地址
>c0a8 01e8  

每8bit转为十进制即可看到为 192.168.1.232  

>ffff ffff  

同样的 肉眼即可见为 255.255.255.255  

如果我们还有兴趣, 继续看, 从ip往前看跳过16bit的那8bit, 也就是协议所占的8bit为11, 是十进制数的17, 我们知道这个标志了传输层的协议类型(tcp-6, udp-17), 所以我们这里是一个udp的数据包  

理所应当的我们继续解析下一层udp的header, 先来一张图  

<img src="/img/in-post/udp.png">  

比起ip跟tcp的header已经是非常简单了, 源端口, 目标端口, 长度, 校验和分别占据2个字节  

`这里关于udp包有一个每次发送多少数据的问题, 我们在以太网数据报1500 bytes的基础上做加减, 先减去20bytes ip header, 再减去udp header 8bytes, 剩余为1472bytes, 当然我们可以选择利用数据分片来传输大更大长度的数据, 但是udp的特性, 单片数据丢失, 就会导致整块数据无法利用, 所以保险起见1472bytes 是一个通用的参考值, 如果网络环境中哪处路由的mtu发生了变化 可以按照(mtu-28)bytes来处理`  

接下来的8个bytes, cba1 d510 0016 c2b7  
>cba1  

52129即为发送端的端口  

>d510  

54544即为接收端的端口  

>0016  

22即为数据长度  

接下来后面终于到了我们的文本内容, 可以轻易的按照ascii码表来比对出内容, 再贴最后一张ascii码的图(顺便安利大家, ascii表可以通过man ascii直接查询, 再也不用去百度找图XD)  

>5468 6973 2069 7320 6120 7465 7374  

直接可以通过ascii中的十六进制比对找到  
Th is (sp)i s(sp) a(sp) te st ->This is a test 

<img src="/img/in-post/ascii.png">  

到这里就算是分析完了这整个返回的结果, 感觉已经偏离了tcpdump的轨道, 等下一篇再接后续的内容吧  

###ps 

这里想再贴一个tcp数据包的结构  

<img src="/img/in-post/tcp.png">  

其中也是20个字节, 分别包括: 源port-16bit, 目标port-16bit, 序号-32bit, 确认号-32bit, 数据偏移(实际上就是数据包的长度, 设计上与ip相同)-4bit, 保留字段-6bit, 紧急字段URG(当URG=1时, 表示此字段紧急, 应尽快传送)-1bit, 确认字段ACK(ACK=1时, 表示确认, 且确认号有效, 0则反之)-1bit, 推送字段PSH(PSH=1时, 报文段会被尽快地交付给目标)-1bit, 复位字段RST(RST为1时, 表示出现错误, 需要释放连接重新建立)-1bit, 同步字段SYN(SYN=1时, 表示发起一个连接请求)-1bit, 终止字段FIN(FIN=1时, 表示发送完成, 要求释放连接), 窗口-16bit, 校验和-16bit, 紧急指针-16bit  

 



 