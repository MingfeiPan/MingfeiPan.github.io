---
layout: post
title:  python中的 iterable 与 iterator
category: python
tag : python
--- 

看了一篇帖子讨论[python range](https://www.v2ex.com/t/524163#reply12) 作者写了很多, 我是觉得这个概念其实是很清楚的, 不需要这么纠结, range()当然不是迭代器(iterator), 而是一个可迭代对象(iterable)  

`Range objects implement the collections.abc.Sequence`  
Range objects继承自Sequence, 是一个iterable, 所以他有\_\_iter\_\_()方法, 有\_\_getitem\_\_()方法(支持切片的原因), 而iterator是不支持切片的。  

```
>>> l = range(5)
>>> dir(l)
['__bool__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index', 'start', 'step', 'stop']


>>> ll = iter(l)
>>> dir(ll)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__length_hint__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__']

```
观察一个iterable与一个iterator的内置函数区别

对iterable 调用iter()会返回一个iterator, iterator必须支持\_\_next\_\_()方法, 而iterable是不能有\_\_next\_\_()方法的。 

iterable的\_\_iter\_\_()方法返回一个iterator, 因为我们期望一个可迭代的对象可以支持多种遍历, 所以每次都可以从iterable获得一个新的iterator, 而iterator的\_\_iter\_\_()返回self也就是他自己, 只能遍历一次, 访问过末尾元素后抛出StopIteration退出。  


所以其实最简单的区别就是在于\_\_next\_\_()方法, iterable是不能实现这个方法的, 也就根本上决定了他跟iterator的区别, 而range是一个sequence对象, 是一个iterable。  

再扯一点关于迭代器的话, 迭代器是如何执行迭代的:

```
>>> S = 'abcd'
>>> SS = iter(S)
>>> for c in SS:
...     print(c)
... 
a
b
c
d
>>> list(SS)
[]

```
* 使用可迭代对象构建迭代器  
* 不断在迭代器上调用next函数, 获取下一个字符  
* 如果没有字符了, 会抛出StopIteration异常(python语言会处理for或其他迭代结构抛出的StopIteration异常)
* 释放迭代器, 退出循环, 此时迭代器中已经没有值了, 想要再次使用必须重新构造迭代器  

可迭代对象是如何迭代的:

```
>>> S = 'abcd'
>>> for c in S:
...     print(c)
... 
a
b
c
d
>>> list(S)
['a', 'b', 'c', 'd']
```

使用可迭代对象构建迭代器, 通常一个iterable会有\_\_iter\_\_()方法, 迭代时调用会返回一个迭代器, 所以可迭代对象是可以重复使用的。   

