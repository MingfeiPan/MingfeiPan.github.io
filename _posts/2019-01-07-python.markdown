---
layout: post
title:  python中的 iterable 与 iterator
category: python
tag : python
--- 

看了一篇帖子讨论[python range](https://www.v2ex.com/t/524163#reply12) 作者写了很多, 个人偏离了重点, range()当然不是迭代器(iterator), 而是一个可迭代对象(iterable)  

`Range objects implement the collections.abc.Sequence`  

Range objects继承自Sequence, 是一个iterable, 所以他有\_\_iter\_\_()方法, 有\_\_getitem\_\_()方法(支持切片的原因), 而iterator是不支持切片的。  

```
>>> l = range(5)
>>> dir(l)
['__bool__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index', 'start', 'step', 'stop']

```

对iterable 调用iter()会返回一个iterator, iterator必须支持\_\_next\_\_()方法, 而iterable是不能有\_\_next\_\_()方法的。  

```
>>> ll = iter(l)
>>> dir(ll)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__length_hint__', '__lt__', '__ne__', '__new__', '__next__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__']

```

iterable的\_\_iter\_\_()方法返回一个iterator, 因为我们期望一个可迭代的对象可以支持多种遍历, 所以每次都可以从iterable获得一个新的iterator, 而iterator的\_\_iter\_\_()返回self也就是他自己, 直观上他也只能遍历一次, 在抛出StopIteration后结束。  


所以其实最简单的区别就是在于\_\_next\_\_()方法, iterable是不能实现这个方法的, 也就根本上决定了他跟iterator的区别, 而range是一个sequence对象, 是一个iterable。  