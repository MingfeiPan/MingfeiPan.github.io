---
layout: post
title: php-fpm源码的一些笔记
category: php
tag : php
--- 


周末花两天时间读了读php-fpm的源码, 身为一个php程序员, 读fpm应该是一件顺理成章的事, fpm的多进程同步阻塞模型也是一个经典模型, 源码不少但是总归还是比较顺畅  

基本的结构就是所谓master/worker的结构, master建立socket到监听listen这一步, 之后fork出子进程, 每个子进程分别在accept方法阻塞(锁解决惊群问题), 父进程后续自己再跑一个loop监听后续事件还有子进程维护回收新建的一些工作  

这里总结一些个人觉得需要记录的点, 属于fpm特色  

1.socket建立, 在fpm.c的fpm_init函数, 可以看到这里初始化了很多东西, fpm_sockets_init_main()这里完成了socket的bind, listen, 后续给子进程包括父进程监听

```
if (0 > fpm_php_init_main()           ||
    0 > fpm_stdio_init_main()         ||
    0 > fpm_conf_init_main(test_conf, force_daemon) ||
    0 > fpm_unix_init_main()          ||
    0 > fpm_scoreboard_init_main()    ||
    0 > fpm_pctl_init_main()          ||
    0 > fpm_env_init_main()           ||
    0 > fpm_signals_init_main()       ||
    0 > fpm_children_init_main()      ||
    0 > fpm_sockets_init_main()       ||
    0 > fpm_worker_pool_init_main()   ||
    0 > fpm_event_init_main()) {

```

2.ONDEMAND模式下, 初始化时不启动任何子进程, 而是父进程通过监听socket的连接, 来判断是否新增, 特别强调这里是观察socket read是否可读来判断, 可读就会增加子进程, 所以可能非上游服务器的请求也会触发master新增子进程的机制(比如telnet了这个端口)

```
memset(wp->ondemand_event, 0, sizeof(struct fpm_event_s));
fpm_event_set(wp->ondemand_event, wp->listening_socket, FPM_EV_READ | FPM_EV_EDGE, fpm_pctl_on_socket_accept, wp);
wp->socket_event_set = 1;
fpm_event_add(wp->ondemand_event, 0);
```

3.scoreboard记分板的实现机制, 注意开始的那个fpm_scoreboard_init_main(), 这里使用了共享内存来进行进程间通信, 这个记分板的信息帮助master来监控workers的运行情况, 非常重要

```
wp->scoreboard = fpm_shm_alloc(sizeof(struct fpm_scoreboard_s) + (wp->config->pm_max_children - 1) * sizeof(struct fpm_scoreboard_proc_s *));
if (!wp->scoreboard) {
	return -1;
}
```

4.对于多进程访问时的数据安全, 这里fpm程序利用原子操作实现了一个自旋锁, 在fpm_atomic.h, for(;;)循环挂起

>关于自旋锁spinlock, 这里有一段跟mutex比较的笔记来解释他的作用, 从实现原理上来讲, Mutex属于sleep-waiting类型的锁, 例如在一个双核的机器上有两个线程(线程A和线程B), 它们分别运行在Core0和Core1上, 假设线程A想要通过pthread_mutex_lock操作去得到一个临界区的锁, 而此时这个锁正被线程B所持有, 那么线程A就会被阻塞(blocking), Core0会在此时进行上下文切换(Context Switch)将线程A置于等待队列中, 此时Core0就可以运行其他的任务(例如另一个线程C)而不必进行忙等待, 而Spin lock则不然, 它属于busy-waiting(忙等)类型的锁, 如果线程A是使用pthread_spin_lock操作去请求锁, 那么线程A就会一直在Core0上进行忙等待并不停的进行锁请求，直到得到这个锁为止


```
static inline atomic_uint_t atomic_cmp_set(atomic_t *lock, atomic_uint_t old, atomic_uint_t set)
{
	unsigned char res;

	__asm__ volatile ( "lock;" "cmpxchgl %3, %1;" "sete%0;" :
		"=a" (res) : "m" (*lock), "a" (old), "r" (set) : "memory");

	return res;
}


static inline int fpm_spinlock(atomic_t *lock, int try_once) 
{
	if (try_once) {
		return atomic_cmp_set(lock, 0, 1) ? 1 : 0;
	}

	for (;;) {

		if (atomic_cmp_set(lock, 0, 1)) {
			break;
		}

		sched_yield();
	}

	return 1;
}
```

5.fpm三种模式, 通常应该都是用dynamic的, 这也是推荐的默认模式, 可以fpm始终保有一定数量的空闲workers(除非超过最大限制), 以免无法保证正常工作  

```
//max spare
if (idle > wp->config->pm_max_spare_servers && last_idle_child) {
	last_idle_child->idle_kill = 1;
	fpm_pctl_kill(last_idle_child->pid, FPM_PCTL_QUIT);
	wp->idle_spawn_rate = 1;
	continue;
}

//min spare
if (idle < wp->config->pm_min_spare_servers) {
	if (wp->running_children >= wp->config->pm_max_children) {
		if (!wp->warn_max_children) {
			fpm_scoreboard_update(0, 0, 0, 0, 0, 1, 0, FPM_SCOREBOARD_ACTION_INC, wp->scoreboard);
			zlog(ZLOG_WARNING, "[pool %s] server reached pm.max_children setting (%d), consider raising it", wp->config->name, wp->config->pm_max_children);
			wp->warn_max_children = 1;
		}
		wp->idle_spawn_rate = 1;
		continue;
	}
	
...
```

6.另外还有一个觉得很有特色的地方  

```
requests++;
if (UNEXPECTED(max_requests && (requests == max_requests))) {
	fcgi_finish_request(request, 1);
	break;
}
```

每个子进程执行一定数量的请求之后机会自动退出, 是为了防止扩展或者PHP自身有内存泄露之类的BUG(感觉很无奈的样子)  


